[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "chatbot-backend"
version = "0.1.0"
description = "Chatbot backend with FastAPI and LangChain"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [
    {name = "Developer", email = "developer@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "fastapi==0.116.1",
    "uvicorn[standard]==0.35.0",
    "pydantic==2.11.7",
    "python-multipart==0.0.20",
    "python-jose[cryptography]==3.5.0",
    "passlib[bcrypt]==1.7.4",
    "python-dotenv==1.1.1",
    "httpx==0.28.1",
    "langchain==0.3.27",
    "langchain-openai==0.3.28",
    "langchain-ollama==0.3.6",
    "langchain-qdrant==0.2.0",
    "openai==1.98.0",
    "qdrant-client==1.10.1",
    "toml==0.10.2",
    "aiofiles==24.1.0",
    "jinja2>=3.0.0",
    "watchdog==6.0.0",
    "langchain-community==0.3.27",
    "pydantic-settings==2.10.1",
    "websockets==12.0",
    "sqlalchemy[asyncio]==2.0.36",
    "asyncmy==0.2.9",
    "alembic==1.14.0",
    "cryptography==43.0.3",
    "aiomysql>=0.2.0",
    "pymysql>=1.1.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "bandit>=1.7.0",
    "pre-commit>=2.20.0",
    "autoflake>=1.7.0",
]

[project.urls]
Homepage = "https://github.com/example/chatbot-backend"
Repository = "https://github.com/example/chatbot-backend.git"
Documentation = "https://github.com/example/chatbot-backend#readme"
"Bug Tracker" = "https://github.com/example/chatbot-backend/issues"


[tool.setuptools.packages.find]
include = ["api*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["api"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "jose.*",
    "passlib.*",
    "langchain.*",
    "openai.*",
    "qdrant_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["api"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/_version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
]
